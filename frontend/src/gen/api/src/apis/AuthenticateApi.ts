/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginInputDto,
  RegisterInputDto,
  StringNewLevelResponse,
  TokensDto,
} from '../models/index';
import {
    LoginInputDtoFromJSON,
    LoginInputDtoToJSON,
    RegisterInputDtoFromJSON,
    RegisterInputDtoToJSON,
    StringNewLevelResponseFromJSON,
    StringNewLevelResponseToJSON,
    TokensDtoFromJSON,
    TokensDtoToJSON,
} from '../models/index';

export interface ApiAuthenticateLoginPostRequest {
    loginInputDto?: LoginInputDto;
}

export interface ApiAuthenticateRegisterPostRequest {
    registerInputDto?: RegisterInputDto;
}

export interface ApiAuthenticateRenewTokenGetRequest {
    accessToken?: string;
}

/**
 * 
 */
export class AuthenticateApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthenticateLoginPostRaw(requestParameters: ApiAuthenticateLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authenticate/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputDtoToJSON(requestParameters['loginInputDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticateLoginPost(requestParameters: ApiAuthenticateLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensDto> {
        const response = await this.apiAuthenticateLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticateLogoutGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authenticate/Logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthenticateLogoutGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthenticateLogoutGetRaw(initOverrides);
    }

    /**
     */
    async apiAuthenticateRegisterPostRaw(requestParameters: ApiAuthenticateRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authenticate/Register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterInputDtoToJSON(requestParameters['registerInputDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticateRegisterPost(requestParameters: ApiAuthenticateRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiAuthenticateRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticateRenewTokenGetRaw(requestParameters: ApiAuthenticateRenewTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensDto>> {
        const queryParameters: any = {};

        if (requestParameters['accessToken'] != null) {
            queryParameters['accessToken'] = requestParameters['accessToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Authenticate/RenewToken`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticateRenewTokenGet(requestParameters: ApiAuthenticateRenewTokenGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensDto> {
        const response = await this.apiAuthenticateRenewTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
