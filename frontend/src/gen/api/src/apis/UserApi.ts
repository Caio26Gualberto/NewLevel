/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  EActivityLocation,
  ProfileInfoDtoNewLevelResponse,
  ResetPasswordInput,
  StringNewLevelResponse,
  UserInfoResponseDtoNewLevelResponse,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    EActivityLocationFromJSON,
    EActivityLocationToJSON,
    ProfileInfoDtoNewLevelResponseFromJSON,
    ProfileInfoDtoNewLevelResponseToJSON,
    ResetPasswordInputFromJSON,
    ResetPasswordInputToJSON,
    StringNewLevelResponseFromJSON,
    StringNewLevelResponseToJSON,
    UserInfoResponseDtoNewLevelResponseFromJSON,
    UserInfoResponseDtoNewLevelResponseToJSON,
} from '../models/index';

export interface ApiUserGenerateTokenToResetPasswordByEmailPostRequest {
    email?: string;
}

export interface ApiUserGetProfileGetRequest {
    nickname?: string;
    userId?: string;
}

export interface ApiUserResetPasswordPostRequest {
    resetPasswordInput?: ResetPasswordInput;
}

export interface ApiUserUpdateUserPostRequest {
    email?: string;
    nickname?: string;
    activityLocation?: EActivityLocation;
    file?: Blob;
}

export interface ApiUserUploadAvatarImagePostRequest {
    file?: Blob;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async apiUserDeleteDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/Delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiUserDeleteDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiUserDeleteDeleteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGenerateTokenToResetPasswordByEmailPostRaw(requestParameters: ApiUserGenerateTokenToResetPasswordByEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/GenerateTokenToResetPasswordByEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGenerateTokenToResetPasswordByEmailPost(requestParameters: ApiUserGenerateTokenToResetPasswordByEmailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiUserGenerateTokenToResetPasswordByEmailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGenerateTokenToResetPasswordPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/GenerateTokenToResetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGenerateTokenToResetPasswordPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiUserGenerateTokenToResetPasswordPostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGetProfileGetRaw(requestParameters: ApiUserGetProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileInfoDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['nickname'] != null) {
            queryParameters['nickname'] = requestParameters['nickname'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/GetProfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileInfoDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGetProfileGet(requestParameters: ApiUserGetProfileGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileInfoDtoNewLevelResponse> {
        const response = await this.apiUserGetProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGetUserInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/GetUserInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGetUserInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoResponseDtoNewLevelResponse> {
        const response = await this.apiUserGetUserInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserResetPasswordPostRaw(requestParameters: ApiUserResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/ResetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordInputToJSON(requestParameters['resetPasswordInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserResetPasswordPost(requestParameters: ApiUserResetPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserResetPasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSkipIntroductionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/SkipIntroduction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserSkipIntroductionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserSkipIntroductionGetRaw(initOverrides);
    }

    /**
     */
    async apiUserUpdateUserPostRaw(requestParameters: ApiUserUpdateUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['Email'] = requestParameters['email'];
        }

        if (requestParameters['nickname'] != null) {
            queryParameters['Nickname'] = requestParameters['nickname'];
        }

        if (requestParameters['activityLocation'] != null) {
            queryParameters['ActivityLocation'] = requestParameters['activityLocation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/User/UpdateUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUpdateUserPost(requestParameters: ApiUserUpdateUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserUpdateUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUploadAvatarImagePostRaw(requestParameters: ApiUserUploadAvatarImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/User/UploadAvatarImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUploadAvatarImagePost(requestParameters: ApiUserUploadAvatarImagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiUserUploadAvatarImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
